<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Qifan Zhang</title><link>https://zh-qifan.github.io/blog/</link><description>Recent content in Blogs on Qifan Zhang</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© 2021</copyright><lastBuildDate>Mon, 28 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zh-qifan.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Why does Jackknife method works?</title><link>https://zh-qifan.github.io/blog/20221008-jackknife-intro/</link><pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate><guid>https://zh-qifan.github.io/blog/20221008-jackknife-intro/</guid><description>In the Advanced Mathematical Statistics course in Spring AY21/22, we studied two popular model-free computational methods used in estimation: Jackknife and Bootstrap. Given $n$ observations $X_1,\cdots, X_n$ and a statistics $T_n$ as the estimation for unknown parameter $\theta$ (e.g. mean value and variance), the Jackknife method for bias estimation formulates as follows, $$ b_{JACK} = (n - 1)(\bar{T}_{n-1} - T_n) $$ where $\bar{T}_{n-1} = n^{-1}\sum_{i=1}^n T_{n-1,i} = n^{-1}\sum_{i=1}^n T_{n-1}(X_1,\cdots,X_{i-1},X_{i+1},\cdots,X_n)$ represents the estimator generated by $n-1$ observations in our full dataset.</description></item><item><title>Jordan-Hahn Decomposition</title><link>https://zh-qifan.github.io/blog/20221030-jordan-hahn-thm/</link><pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate><guid>https://zh-qifan.github.io/blog/20221030-jordan-hahn-thm/</guid><description>Jordan-Hahn decomposition is one of the most important theorem in measure theory but its proof is both lengthy and hard to understand, at least for beginners. In this post, I want to give an intuitive understanding on its proof to illustrate why it constructs a set like that and what it is doing.
Jordan-Hahn decomposition states as follows,
Let $\nu$ be a signed measure on $(\Omega, \mathcal{F})$. Then it has a decomposition $$\nu = \nu^+ - \nu^- $$ where $$ \nu^+(A) = \sup \{\nu(B)|B\subset A, B \in \mathcal{F}\} $$$$ \nu^-(A) = \sup \{-\nu(B)|B\subset A, B \in \mathcal{F}\} $$ and both $\nu^+$ and $\nu^-$ are measure and one of them is a finite measure.</description></item><item><title>Drawing balls from an unknown bag</title><link>https://zh-qifan.github.io/blog/20230827-a-simple-but-powerful-lemma-in-drawing-balls/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://zh-qifan.github.io/blog/20230827-a-simple-but-powerful-lemma-in-drawing-balls/</guid><description>Consider such a problem that bag A has $a$ white balls and $b$ black balls and bag B has $\alpha$ white balls and $\beta$ black balls. Now draw $c(c\leq a+b)$ balls from the bag A to the bag B. Then what is the probability that drawing a white ball from the bag B?
To solve this problem, one can directly calculate the probability using the law of total probability. In the calculation, one will find an interesting fact which I summarize as a lemma below.</description></item><item><title>Rcplex Installation</title><link>https://zh-qifan.github.io/blog/20230801-rcplex-installation/</link><pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate><guid>https://zh-qifan.github.io/blog/20230801-rcplex-installation/</guid><description>I need to install Rcplex recently to replicate the results of one paper. However, the direct use of install.packages(&amp;ldquo;Rcplex&amp;rdquo;) did not work on Windows. In this article, I will introduce how to successfully install Rcplex on your Windows.
Step 1 Get your cplex source file on https://www.ibm.com/products/ilog-cplex-optimization-studio. Let&amp;rsquo;s say you install the Cplex Studio at D:/Cplex Studio/;
Step 2 Download the Rcplex .gz package on https://cran.r-project.org/web/packages/Rcplex/index.html and unzip it to D:/Rcplex/;</description></item><item><title>Odd Coin (Defective Ball) Problem</title><link>https://zh-qifan.github.io/blog/20230626-think-deeper-odd-coin/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://zh-qifan.github.io/blog/20230626-think-deeper-odd-coin/</guid><description>Given a set of 12 balls , one of which is defective (it weighs either less or more) . You are allow to weigh 3 times to find the defective and also tell which weighs less or more.
The above is a question on A Practical Guid to Quantitative Finance Interview. The book gives a more general answer to this book without any explanation &amp;ndash; you can identify the defective ball among up to $(3^n - 3) / 2$ balls using no more than $n$ measurements.</description></item></channel></rss>